const express = require('express');
const cors = require('cors');
const app = express();
require('dotenv').config();

// Utiliser CORS et JSON
app.use(cors());
app.use(express.json());

// Cl√© OpenAI depuis .env
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// POST - Route pour Chlo√©
app.post('/ask-chloe', async (req, res) => {
  const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

  const userMessage = req.body.message;

  const prompt = `
Tu es Chlo√©, une assistante virtuelle douce, empathique, bienveillante.
Tu ne donnes jamais de conseils m√©dicaux ou psychologiques.
Tu √©coutes, tu accompagnes, tu rassures. Tu as une petite touche d'humour l√©ger.
Si la personne semble en d√©tresse, tu proposes de l‚Äôaide de fa√ßon humaine, sans jugement.
Sois simple, r√©confortante, et fais sentir √† la personne qu‚Äôelle n‚Äôest pas seule.

Message de l‚Äôutilisateur : "${userMessage}"
  `;

  try {
    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: prompt }
        ],
        temperature: 0.7
      })
    });

    const json = await openaiRes.json();

    if (!json.choices || !json.choices[0]) {
      throw new Error("R√©ponse invalide de l'API OpenAI");
    }

    const chloeReply = json.choices[0].message.content;
    res.json({ response: chloeReply });

  } catch (err) {
    console.error("Erreur c√¥t√© serveur :", err);
    res.status(500).json({ response: "Oups, je ne peux pas r√©pondre pour l‚Äôinstant. R√©essaie un peu plus tard. üò•" });
  }
});

// GET - Pour tester que √ßa marche
app.get("/", (req, res) => {
  res.send("API Chlo√© fonctionne ‚ú®");
});

// Lancer le serveur
const listener = app.listen(process.env.PORT || 3000, () => {
  console.log("Chlo√© √©coute sur le port " + listener.address().port);
});